// // // let obj = {
// // //   a: 10,
// // // };

// // // function abc() {
// // //   console.log("inside window");
// // //   console.log('inside fn->',this);
// // // }

// // // console.log(obj);

// // // // dataStructure.method()
// // // abc.call(obj);

// // // console.log(obj);

// // // abc();

// // // // steps involved inside call method when you write funtionName.call(objName);

// // // // 1. it attaches funtionName function with objName object.
// // // // 2. it executes funtionName function with objName context -> how?????
// // // //          2 A. -> objName.funtionName();
// // // // 3. delete funtionName from objName




// // let obj2 = {
// //   obj3: {
// //     ppoiui: 'this is obj3 string',
// //   },
// // };

// // const test = () => {
// //   console.log(this);
// // };

// // test.call(obj2.obj3);

// function abc(param1, param2, ...params) { // rest operator
//   console.log(param1);
//   console.log(param2);
//   console.log(params); // printing the array generated by
// //   rest operator
//   console.log(...params); // spread operator
// }

// // ... -> if you are writing this in
// // function parameter '...' acts as rest operator
// // which are usually spread operator

// // you cannot write any other param after
// // rest operator

// abc(1,2,3,4,5,6);

// // function abc(param1, ...params) {
// //   console.log(params);
// // }

// // abc(1);


function abc(param1, param2, param3) {
  console.log(this, param1, param2, param3);
}

let obj = {
  a: 10,
};

// arg1=10, arg2=20, arg3=30

abc.call(obj, 10, 20, 30);
abc(10, 20, 30);
